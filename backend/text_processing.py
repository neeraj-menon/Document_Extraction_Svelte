"""
This module processes PDF files by converting them into images, extracting text from the images, 
and generating JSON responses using the Groq API based on a given system prompt.
"""

import os
from groq import Groq
from pdf_2_image import PDFConvert
from image_2_text import ImageConvert
from progress import update_progress
import json
import re

# Initialize Groq client with API key
client = Groq(api_key="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")


def process_text(pdf_path, system_prompt):
    """
    Processes the given PDF file, extracts text from the images, and generates JSON
    responses based on a system prompt using the Groq API.

    Parameters:
    ----------
    pdf_path : str
        The path to the PDF file that needs to be processed.
    
    system_prompt : str
        The system prompt used to guide the Groq API in generating JSON responses.

    Returns:
    -------
    str
        The processed JSON results generated by Groq based on the extracted text.
    """
    # Initialize the PDF to image converter and the image to text converter
    convert_pdf = PDFConvert()
    convert_image = ImageConvert()
    
    # Convert PDF to images and save them in a designated folder
    update_progress(30, 'Extracting Images...')
    image_folder = './DocEx_frontend/backend/extracted_images'
    image_paths = convert_pdf.convert_pdf_to_images(pdf_path, output_folder=image_folder)
    
    
    # Extract text from the generated images
    update_progress(40, 'Extracting Text...')
    extracted_text = convert_image.extract_text_from_images(image_paths)
    
    
    update_progress(50, 'Processing Text...')

    # Prepare to store processed results
    processed_results = ""

    # Process extracted text using the system prompt with Groq API
    for text_chunk in extracted_text:
        chat_completion = client.chat.completions.create(
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": text_chunk},
            ],
            model="llama3-70b-8192",
            temperature=0.5,
            max_tokens=2048,
        )

        # Extract the relevant part of the response (starting from the first '{')
        result = chat_completion.choices[0].message.content
        # start = result.find("```")
        # result = result[start+1:]  # Extract the result from the JSON-like part
        # Regex pattern to extract content between triple backticks
        pattern = r'```(.*?)```'
        print(result)

        # Find all matches using regex
        matches = re.findall(pattern, result, re.DOTALL)
        json_content = ""

        # Extracted content between triple backticks
        if matches:
            json_content = matches[0].strip()
            print(json_content)
        else:
            print("No content found between triple backticks.")
            
        processed_results += json_content
        
    update_progress(80, 'Finalizing...')

    # Ensure the JSON is balanced by appending '}' if necessary
    if processed_results.count('{') > processed_results.count('}'):
        processed_results += '}'

    return processed_results


